if (!requireNamespace("dbscan", quietly = TRUE)) install.packages("dbscan")
if (!requireNamespace("plotly", quietly = TRUE)) install.packages("plotly")
if (!requireNamespace("maps", quietly = TRUE)) install.packages("maps")
library(dbscan)
library(plotly)
library(maps)
library(dplyr)
library(ggplot2)
# Load world map data
world_map <- map_data("world")
# Filter and prepare the data for all regions
all_regions_data <- filtered_geo %>%
select(Region, Magnitude, Total.Affected, Total.Deaths, Total_Damage_USD, Longitude, Latitude, Disaster.Type) %>%
drop_na()  # Remove rows with missing values
# Scale the numerical data
scaled_data <- scale(all_regions_data %>% select(Magnitude, Total.Affected, Total.Deaths, Total_Damage_USD, Longitude, Latitude))
# Perform HDBSCAN clustering
set.seed(42)  # Ensure reproducibility
hdbscan_result <- hdbscan(scaled_data, minPts = 10)  # Adjust minPts as needed
# Add cluster labels to the dataset
all_regions_data$Cluster <- hdbscan_result$cluster
# Remove noise points (Cluster = 0)
all_regions_data_filtered <- all_regions_data %>%
filter(Cluster != 0)
# Create the base map with proper grouping
base_map <- ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group),
fill = "gray90", color = "white") +
coord_fixed(ratio = 1.3) +
theme_void()
# Overlay clustering visualization
cluster_plot <- base_map +
geom_point(data = all_regions_data_filtered, aes(x = Longitude, y = Latitude,
color = as.factor(Cluster),
shape = Disaster.Type,
size = Total_Damage_USD / 1e6,
text = paste(
"Region:", Region,
"<br>Cluster:", Cluster,
"<br>Disaster Type:", Disaster.Type,
"<br>Magnitude:", Magnitude,
"<br>Total Affected:", Total.Affected,
"<br>Total Deaths:", Total.Deaths,
"<br>Total Damage (USD):", Total_Damage_USD
)), alpha = 0.8) +
labs(
title = "HDBSCAN Clustering Analysis with World Map: All Regions",
x = "Longitude", y = "Latitude",
color = "Cluster",
shape = "Disaster Type",
size = "Total Damage (USD, scaled)"
) +
theme_minimal()
# Render the plot with plotly for interactivity
ggplotly(cluster_plot, tooltip = "text")
}
# Call the function to visualize all regions
perform_hdbscan_all_regions()
# Update noise points to a specific label
region_data$Cluster <- as.factor(region_data$Cluster)
df = read.csv("C:\\Users\\karti\\OneDrive\\Desktop\\DISASTERS_1988.csv")
colnames(df)
# Load the dplyr library
library(dplyr)
df <- df %>%
rename(Total_Damage_USD = Total_Damage_.US...)
Geo <- df %>%
select(Disaster.Type, Country, Region, Magnitude, Magnitude.Scale, Location, Latitude, Longitude, Total.Affected, Total.Deaths, Total_Damage_USD)
head(Geo)
summary(Geo)
# Count of missing values in each column
colSums(is.na(Geo))
# Filter out rows with missing values in required columns
Geo <- Geo %>%
filter(!is.na(Latitude) & !is.na(Longitude) &
!is.na(Total.Deaths) & !is.na(Total.Affected) & !is.na(Magnitude))
# Check the frequency of occurrences per country
country_distribution <- Geo %>%
count(Country, sort = TRUE)
# View the top countries
print(country_distribution)
# Summarize region-wise distribution
region_distribution <- Geo %>%
group_by(Region) %>%
summarise(
Total_Affected = sum(Total.Affected, na.rm = TRUE),
Total_Deaths = sum(Total.Deaths, na.rm = TRUE),
Total_Damage = sum(Total_Damage_USD, na.rm = TRUE),
Count = n()
) %>%
arrange(desc(Total_Affected))  # Sort by Total Affected (or change sorting criteria)
# View the summarized data
print(region_distribution)
# Summarize frequency and totals per country
country_distribution <- Geo %>%
group_by(Country) %>%
summarise(
Frequency = n(),  # Number of disasters
Total_Deaths = sum(Total.Deaths, na.rm = TRUE),
Total_Affected = sum(Total.Affected, na.rm = TRUE),
Total_Damage = sum(Total_Damage_USD, na.rm = TRUE)
) %>%
arrange(desc(Frequency))  # Sort by frequency (or change to Total_Deaths/Total_Damage)
# View the summarized data
print(country_distribution, n=150)
library(dplyr)
# Calculate the disaster count for each country
filtered_geo <- Geo %>%
group_by(Country) %>%
mutate(Disaster_Count = n()) %>%  # Add a column with disaster count
ungroup() %>%
filter(Disaster_Count > 4) %>%   # Keep only countries with disaster count >= 4
select(-Disaster_Count)           # Optionally, remove the disaster count column
# View the updated dataset
# Summarize frequency and totals per country
country_distribution2 <- filtered_geo %>%
group_by(Country) %>%
summarise(
Frequency = n(),  # Number of disasters
Total_Deaths = sum(Total.Deaths, na.rm = TRUE),
Total_Affected = sum(Total.Affected, na.rm = TRUE),
Total_Damage = sum(Total_Damage_USD, na.rm = TRUE)
) %>%
arrange(desc(Frequency))  # Sort by frequency (or change to Total_Deaths/Total_Damage)
# View the summarized data
print(country_distribution2, n=100)
# Summarize region-wise distribution
region_distribution <- filtered_geo %>%
group_by(Region) %>%
summarise(
Total_Affected = sum(Total.Affected, na.rm = TRUE),
Total_Deaths = sum(Total.Deaths, na.rm = TRUE),
Total_Damage = sum(Total_Damage_USD, na.rm = TRUE),
Count = n()
) %>%
arrange(desc(Total_Affected))  # Sort by Total Affected (or change sorting criteria)
# View the summarized data
print(region_distribution)
# Filter out Oceania from the dataset
filtered_geo <- filtered_geo %>%
filter(Region != "Oceania")
summary(filtered_geo)
numeric_data <- filtered_geo %>%
select(where(is.numeric))
# Compute the correlation matrix
correlation_matrix <- cor(numeric_data, use = "complete.obs")
# View the correlation matrix
print(correlation_matrix)
summary(filtered_geo$Total_Damage_USD)
# Replace missing values with the median
median_damage <- median(filtered_geo$Total_Damage_USD, na.rm = TRUE)
filtered_geo <- filtered_geo %>%
mutate(
Total_Damage_USD = ifelse(is.na(Total_Damage_USD), median_damage, Total_Damage_USD)
)
summary(filtered_geo$Total_Damage_USD)
# Ensure Disaster.Type column has no leading/trailing spaces and is in lowercase
filtered_geo$Disaster.Type <- tolower(trimws(filtered_geo$Disaster.Type))
# Filter out rows where Disaster.Type is "storm"
filtered_geo <- filtered_geo[filtered_geo$Disaster.Type != "storm", ]
# Check the distribution again
disaster_type_distribution <- filtered_geo %>%
count(Disaster.Type, sort = TRUE)
# View the updated distribution
print(disaster_type_distribution)
library(ggplot2)
library(dplyr)
library(plotly)
visualize_disaster_types_by_country <- function() {
# Summarize the data by Disaster Type and Country
disaster_summary <- filtered_geo %>%
group_by(Country, Disaster.Type) %>%
summarise(
Total_Affected = sum(Total.Affected, na.rm = TRUE),
Total_Damage_USD = sum(Total_Damage_USD, na.rm = TRUE)
) %>%
ungroup() %>%
arrange(desc(Total_Affected)) %>%
top_n(20, Total_Affected)  # Select top 20 countries by Total Affected
# Create the plot
plot <- ggplot(disaster_summary, aes(
x = reorder(Country, Total_Affected),
y = Total_Affected,
fill = Disaster.Type,
text = paste(
"Country:", Country,
"<br>Disaster Type:", Disaster.Type,
"<br>Total Affected:", Total_Affected,
"<br>Total Damage (USD):", Total_Damage_USD
)
)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Top 20 Countries Affected by Disaster Types",
x = "Country",
y = "Total Affected",
fill = "Disaster Type"
) +
theme_minimal() +
coord_flip()  # Flip coordinates for better readability
# Render the plot with plotly for interactivity
ggplotly(plot, tooltip = "text")
}
# Call the function to create and display the visualization
visualize_disaster_types_by_country()
# Filter data by regions
asia_data <- filtered_geo %>% filter(Region == "Asia")
americas_data <- filtered_geo %>% filter(Region == "Americas")
africa_data <- filtered_geo %>% filter(Region == "Africa")
europe_data <- filtered_geo %>% filter(Region == "Europe")
# Install required libraries if not already installed
#install.packages("sf")
#install.packages("spatstat")
#install.packages("ggplot2")
#install.packages("dbscan")
# Load libraries
library(dbscan)
library(sf)
library(ggplot2)
library(spatstat)
library(ggplot2)
library(plotly)
library(cluster)
library(tidyverse)
perform_hdbscan_all_regions <- function() {
# Load required libraries
if (!requireNamespace("dbscan", quietly = TRUE)) install.packages("dbscan")
if (!requireNamespace("plotly", quietly = TRUE)) install.packages("plotly")
if (!requireNamespace("maps", quietly = TRUE)) install.packages("maps")
library(dbscan)
library(plotly)
library(maps)
library(dplyr)
library(ggplot2)
# Load world map data
world_map <- map_data("world")
# Filter and prepare the data for all regions
all_regions_data <- filtered_geo %>%
select(Region, Magnitude, Total.Affected, Total.Deaths, Total_Damage_USD, Longitude, Latitude, Disaster.Type) %>%
drop_na()  # Remove rows with missing values
# Scale the numerical data
scaled_data <- scale(all_regions_data %>% select(Magnitude, Total.Affected, Total.Deaths, Total_Damage_USD, Longitude, Latitude))
# Perform HDBSCAN clustering
set.seed(42)  # Ensure reproducibility
hdbscan_result <- hdbscan(scaled_data, minPts = 10)  # Adjust minPts as needed
# Add cluster labels to the dataset
all_regions_data$Cluster <- hdbscan_result$cluster
# Remove noise points (Cluster = 0)
all_regions_data_filtered <- all_regions_data %>%
filter(Cluster != 0)
# Create the base map with proper grouping
base_map <- ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group),
fill = "gray90", color = "white") +
coord_fixed(ratio = 1.3) +
theme_void()
# Overlay clustering visualization
cluster_plot <- base_map +
geom_point(data = all_regions_data_filtered, aes(x = Longitude, y = Latitude,
color = as.factor(Cluster),
shape = Disaster.Type,
size = Total_Damage_USD / 1e6,
text = paste(
"Region:", Region,
"<br>Cluster:", Cluster,
"<br>Disaster Type:", Disaster.Type,
"<br>Magnitude:", Magnitude,
"<br>Total Affected:", Total.Affected,
"<br>Total Deaths:", Total.Deaths,
"<br>Total Damage (USD):", Total_Damage_USD
)), alpha = 0.8) +
labs(
title = "HDBSCAN Clustering Analysis with World Map: All Regions",
x = "Longitude", y = "Latitude",
color = "Cluster",
shape = "Disaster Type",
size = "Total Damage (USD, scaled)"
) +
theme_minimal()
# Render the plot with plotly for interactivity
ggplotly(cluster_plot, tooltip = "text")
}
# Call the function to visualize all regions
perform_hdbscan_all_regions()
# Update noise points to a specific label
region_data$Cluster <- as.factor(region_data$Cluster)
df = read.csv("C:\\Users\\karti\\OneDrive\\Desktop\\DISASTERS_1988.csv")
colnames(df)
# Load the dplyr library
library(dplyr)
df <- df %>%
rename(Total_Damage_USD = Total_Damage_.US...)
Geo <- df %>%
select(Disaster.Type, Country, Region, Magnitude, Magnitude.Scale, Location, Latitude, Longitude, Total.Affected, Total.Deaths, Total_Damage_USD)
head(Geo)
summary(Geo)
# Count of missing values in each column
colSums(is.na(Geo))
# Filter out rows with missing values in required columns
Geo <- Geo %>%
filter(!is.na(Latitude) & !is.na(Longitude) &
!is.na(Total.Deaths) & !is.na(Total.Affected) & !is.na(Magnitude))
# Check the frequency of occurrences per country
country_distribution <- Geo %>%
count(Country, sort = TRUE)
# View the top countries
print(country_distribution)
# Summarize region-wise distribution
region_distribution <- Geo %>%
group_by(Region) %>%
summarise(
Total_Affected = sum(Total.Affected, na.rm = TRUE),
Total_Deaths = sum(Total.Deaths, na.rm = TRUE),
Total_Damage = sum(Total_Damage_USD, na.rm = TRUE),
Count = n()
) %>%
arrange(desc(Total_Affected))  # Sort by Total Affected (or change sorting criteria)
# View the summarized data
print(region_distribution)
# Summarize frequency and totals per country
country_distribution <- Geo %>%
group_by(Country) %>%
summarise(
Frequency = n(),  # Number of disasters
Total_Deaths = sum(Total.Deaths, na.rm = TRUE),
Total_Affected = sum(Total.Affected, na.rm = TRUE),
Total_Damage = sum(Total_Damage_USD, na.rm = TRUE)
) %>%
arrange(desc(Frequency))  # Sort by frequency (or change to Total_Deaths/Total_Damage)
# View the summarized data
print(country_distribution, n=150)
library(dplyr)
# Calculate the disaster count for each country
filtered_geo <- Geo %>%
group_by(Country) %>%
mutate(Disaster_Count = n()) %>%  # Add a column with disaster count
ungroup() %>%
filter(Disaster_Count > 4) %>%   # Keep only countries with disaster count >= 4
select(-Disaster_Count)           # Optionally, remove the disaster count column
# View the updated dataset
# Summarize frequency and totals per country
country_distribution2 <- filtered_geo %>%
group_by(Country) %>%
summarise(
Frequency = n(),  # Number of disasters
Total_Deaths = sum(Total.Deaths, na.rm = TRUE),
Total_Affected = sum(Total.Affected, na.rm = TRUE),
Total_Damage = sum(Total_Damage_USD, na.rm = TRUE)
) %>%
arrange(desc(Frequency))  # Sort by frequency (or change to Total_Deaths/Total_Damage)
# View the summarized data
print(country_distribution2, n=100)
# Summarize region-wise distribution
region_distribution <- filtered_geo %>%
group_by(Region) %>%
summarise(
Total_Affected = sum(Total.Affected, na.rm = TRUE),
Total_Deaths = sum(Total.Deaths, na.rm = TRUE),
Total_Damage = sum(Total_Damage_USD, na.rm = TRUE),
Count = n()
) %>%
arrange(desc(Total_Affected))  # Sort by Total Affected (or change sorting criteria)
# View the summarized data
print(region_distribution)
# Filter out Oceania from the dataset
filtered_geo <- filtered_geo %>%
filter(Region != "Oceania")
summary(filtered_geo)
numeric_data <- filtered_geo %>%
select(where(is.numeric))
# Compute the correlation matrix
correlation_matrix <- cor(numeric_data, use = "complete.obs")
# View the correlation matrix
print(correlation_matrix)
summary(filtered_geo$Total_Damage_USD)
# Replace missing values with the median
median_damage <- median(filtered_geo$Total_Damage_USD, na.rm = TRUE)
filtered_geo <- filtered_geo %>%
mutate(
Total_Damage_USD = ifelse(is.na(Total_Damage_USD), median_damage, Total_Damage_USD)
)
summary(filtered_geo$Total_Damage_USD)
# Ensure Disaster.Type column has no leading/trailing spaces and is in lowercase
filtered_geo$Disaster.Type <- tolower(trimws(filtered_geo$Disaster.Type))
# Filter out rows where Disaster.Type is "storm"
filtered_geo <- filtered_geo[filtered_geo$Disaster.Type != "storm", ]
# Check the distribution again
disaster_type_distribution <- filtered_geo %>%
count(Disaster.Type, sort = TRUE)
# View the updated distribution
print(disaster_type_distribution)
library(ggplot2)
library(dplyr)
library(plotly)
visualize_disaster_types_by_country <- function() {
# Summarize the data by Disaster Type and Country
disaster_summary <- filtered_geo %>%
group_by(Country, Disaster.Type) %>%
summarise(
Total_Affected = sum(Total.Affected, na.rm = TRUE),
Total_Damage_USD = sum(Total_Damage_USD, na.rm = TRUE)
) %>%
ungroup() %>%
arrange(desc(Total_Affected)) %>%
top_n(20, Total_Affected)  # Select top 20 countries by Total Affected
# Create the plot
plot <- ggplot(disaster_summary, aes(
x = reorder(Country, Total_Affected),
y = Total_Affected,
fill = Disaster.Type,
text = paste(
"Country:", Country,
"<br>Disaster Type:", Disaster.Type,
"<br>Total Affected:", Total_Affected,
"<br>Total Damage (USD):", Total_Damage_USD
)
)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Top 20 Countries Affected by Disaster Types",
x = "Country",
y = "Total Affected",
fill = "Disaster Type"
) +
theme_minimal() +
coord_flip()  # Flip coordinates for better readability
# Render the plot with plotly for interactivity
ggplotly(plot, tooltip = "text")
}
# Call the function to create and display the visualization
visualize_disaster_types_by_country()
# Filter data by regions
asia_data <- filtered_geo %>% filter(Region == "Asia")
americas_data <- filtered_geo %>% filter(Region == "Americas")
africa_data <- filtered_geo %>% filter(Region == "Africa")
europe_data <- filtered_geo %>% filter(Region == "Europe")
# Install required libraries if not already installed
#install.packages("sf")
#install.packages("spatstat")
#install.packages("ggplot2")
#install.packages("dbscan")
# Load libraries
library(dbscan)
library(sf)
library(ggplot2)
library(spatstat)
library(ggplot2)
library(plotly)
library(cluster)
library(tidyverse)
perform_hdbscan_all_regions <- function() {
# Load required libraries
if (!requireNamespace("dbscan", quietly = TRUE)) install.packages("dbscan")
if (!requireNamespace("plotly", quietly = TRUE)) install.packages("plotly")
if (!requireNamespace("maps", quietly = TRUE)) install.packages("maps")
library(dbscan)
library(plotly)
library(maps)
library(dplyr)
library(ggplot2)
# Load world map data
world_map <- map_data("world")
# Filter and prepare the data for all regions
all_regions_data <- filtered_geo %>%
select(Region, Magnitude, Total.Affected, Total.Deaths, Total_Damage_USD, Longitude, Latitude, Disaster.Type) %>%
drop_na()  # Remove rows with missing values
# Scale the numerical data
scaled_data <- scale(all_regions_data %>% select(Magnitude, Total.Affected, Total.Deaths, Total_Damage_USD, Longitude, Latitude))
# Perform HDBSCAN clustering
set.seed(42)  # Ensure reproducibility
hdbscan_result <- hdbscan(scaled_data, minPts = 10)  # Adjust minPts as needed
# Add cluster labels to the dataset
all_regions_data$Cluster <- hdbscan_result$cluster
# Remove noise points (Cluster = 0)
all_regions_data_filtered <- all_regions_data %>%
filter(Cluster != 0)
# Create the base map with proper grouping
base_map <- ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group),
fill = "gray90", color = "white") +
coord_fixed(ratio = 1.3) +
theme_void()
# Overlay clustering visualization
cluster_plot <- base_map +
geom_point(data = all_regions_data_filtered, aes(x = Longitude, y = Latitude,
color = as.factor(Cluster),
shape = Disaster.Type,
size = Total_Damage_USD / 1e6,
text = paste(
"Region:", Region,
"<br>Cluster:", Cluster,
"<br>Disaster Type:", Disaster.Type,
"<br>Magnitude:", Magnitude,
"<br>Total Affected:", Total.Affected,
"<br>Total Deaths:", Total.Deaths,
"<br>Total Damage (USD):", Total_Damage_USD
)), alpha = 0.8) +
labs(
title = "HDBSCAN Clustering Analysis with World Map: All Regions",
x = "Longitude", y = "Latitude",
color = "Cluster",
shape = "Disaster Type",
size = "Total Damage (USD, scaled)"
) +
theme_minimal()
# Render the plot with plotly for interactivity
ggplotly(cluster_plot, tooltip = "text")
}
# Call the function to visualize all regions
perform_hdbscan_all_regions()
